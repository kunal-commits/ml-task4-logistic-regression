# Logistic Regression Binary Classification - Breast Cancer Dataset

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc, precision_score, recall_score

# 2. Load Dataset (Download from Kaggle and keep in same folder)
# Kaggle Link: https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data
df = pd.read_csv("breast_cancer_wisconsin_data.csv")  # <- Change filename if different

# Drop unnecessary columns
df.drop(['Unnamed: 32', 'id'], axis=1, inplace=True)

# Encode target variable (M=1, B=0)
df['diagnosis'] = df['diagnosis'].map({'M':1, 'B':0})

print("Dataset Shape:", df.shape)
print(df.head())

# 3. Features and Target
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# 4. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Standardize Features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 6. Train Logistic Regression Model
model = LogisticRegression()
model.fit(X_train, y_train)

# 7. Predictions
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]  # probability scores

# 8. Evaluation
cm = confusion_matrix(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("Confusion Matrix:\n", cm)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Precision:", precision)
print("Recall:", recall)

# 9. ROC-AUC
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='red', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

# 10. Threshold Tuning Example
threshold = 0.4  # Example custom threshold
y_pred_custom = (y_prob >= threshold).astype(int)
print(f"Confusion Matrix at threshold {threshold}:\n", confusion_matrix(y_test, y_pred_custom))

# 11. Sigmoid Function Explanation
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

z_vals = np.linspace(-10, 10, 100)
plt.plot(z_vals, sigmoid(z_vals))
plt.title("Sigmoid Function")
plt.xlabel("z")
plt.ylabel("Sigmoid(z)")
plt.grid(True)
plt.show()
